{"version":3,"file":"src_scene_Main_Main_tsx-acdb54fcc43da605f70e.js","mappings":"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","sources":["webpack://project/./src/api/photosEndPoint.ts","webpack://project/./src/components/RandomPhoto/randomPhoto.tsx","webpack://project/./src/components/RoverSelector/roverSelector.tsx","webpack://project/./src/entities/RoversName.ts","webpack://project/./src/scene/Main/Main.tsx","webpack://project/./src/utils/utils.ts"],"sourcesContent":["import Photos from \"src/entities/Photos\";\r\nimport { instance, API_URL } from \"./instance\";\r\n\r\nexport const getPhotosEndPoint = async (\r\n  roverName: string,\r\n  sol?: number,\r\n  earth_date?: string,\r\n  camera?: string,\r\n  page?: number\r\n): Promise<Photos> => {\r\n  const ApiResp = await instance.get<PhotosApiData>(`${API_URL}/rovers/${roverName}/photos`, {\r\n    params: {\r\n      earth_date,\r\n      sol,\r\n      camera,\r\n      page\r\n    }\r\n  });\r\n  return ApiResp.data.photos;\r\n};\r\n\r\nexport interface PhotosApiData {\r\n  photos: Photos;\r\n}\r\n","import { getPhotosEndPoint } from \"api/photosEndPoint\";\r\nimport RoverSelector from \"components/RoverSelector/roverSelector\";\r\nimport React, { useState } from \"react\";\r\nimport RoversName from \"src/entities/RoversName\";\r\nimport { getRandomInt } from \"utils/utils\";\r\n\r\nconst RandomPhoto: React.FC = () => {\r\n  const [rover, setRover] = useState(\"Curiosity\");\r\n  const [img, setImg] = useState(\"\");\r\n\r\n  const getRandomPhoto = async (roverName: string): Promise<string> => {\r\n    const apiResp = await getPhotosEndPoint(roverName, undefined, \"2015-06-03\");\r\n    return apiResp[getRandomInt(0, apiResp.length - 1)]?.img_src;\r\n  };\r\n  const handleButton = () => {\r\n    getRandomPhoto(rover).then((imgSrc) => {\r\n      setImg(imgSrc);\r\n    });\r\n  };\r\n\r\n  function setRoverInComponent(param: string): void {\r\n    setRover(param);\r\n  }\r\n\r\n  return (\r\n    <div className='center'>\r\n      <RoverSelector onSelect={setRoverInComponent} options={RoversName} />\r\n      <br />\r\n      <button type='button' onClick={handleButton}>\r\n        Random image\r\n      </button>\r\n      <br />\r\n      <img className='roverPhoto' alt='RandomRoversPhoto' src={img} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RandomPhoto;\r\n","import React, { FC } from \"react\";\r\nimport Select, { ActionMeta } from \"react-select\";\r\n\r\nconst RoverSelector: FC<{ options: string[]; onSelect: (value: string) => void }> = ({\r\n  onSelect,\r\n  options\r\n}) => {\r\n  interface Option {\r\n    label: string;\r\n    value: string;\r\n  }\r\n  const selectOptions: Option[] = options.map((item) => {\r\n    return {\r\n      value: item,\r\n      label: item\r\n    };\r\n  });\r\n  const handleSelectChange = (option: Option | null, actionMeta: ActionMeta<Option>) => {\r\n    if (option != null) {\r\n      onSelect(option.value);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className='selector'>\r\n      <Select options={selectOptions} onChange={handleSelectChange} />\r\n      {/* <select onChange={(e) => handleSelectChange(e.currentTarget.value)}>\r\n        {options.map((item) => (\r\n          <option value={item} key={item}>\r\n            {item}\r\n          </option>\r\n        ))}\r\n      </select> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RoverSelector;\r\n","const RoversName: string[] = [\"Curiosity\", \"Opportunity\", \"Spirit\"];\r\n\r\nexport default RoversName;\r\n","import RandomPhoto from \"components/RandomPhoto/randomPhoto\";\r\nimport React from \"react\";\r\n\r\nconst Main: React.FC = () => {\r\n  return <RandomPhoto />;\r\n};\r\n\r\nexport default Main;\r\n","/* eslint-disable import/prefer-default-export */\r\n/**\r\n * Функция позволяет получить случайное целое число в заданном интервале.\r\n * Возвращаемое значение не менее min (или следующее целое число, которое больше min, если min не целое) и не более (включительно) max.\r\n * @param min Минимальное возможное случайное целое число\r\n * @param max Максимально возможное случайное целое число\r\n * @returns Случайное целое число в заданном диапазоне\r\n */\r\nexport function getRandomInt(min: number, max: number): number {\r\n  const RoundedMin = Math.ceil(min);\r\n  const RoundedMax = Math.floor(max);\r\n  return Math.floor(Math.random() * (RoundedMax - RoundedMin + 1)) + RoundedMin;\r\n}\r\n"],"names":[],"sourceRoot":""}