{"version":3,"file":"src_scene_Manifest_ManifestPage_tsx-ffb128e4bcf1a77707f2.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAuD;AAEjB;AACY;AAEC;AACY;AAI/D,IAAM,YAAY,GAA8B,UAAC,EAAW;QAAV,SAAS;;IACnD,SAA0B,+CAAQ,CAAW,mEAAgB,EAAE,CAAC,EAA/D,QAAQ,UAAE,WAAW,QAA0C,CAAC;IAEvE,gDAAS,CAAC;QACR,iEAAW,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,UAAC,OAAO;YAClC,WAAW,CAAC,OAAO,CAAC,CAAC;SACtB,CAAC,CAAC;KACJ,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC;IAEhB,OAAO,CACL,iDAAC,0DAAI,IAAC,SAAS,QAAC,OAAO,EAAE,CAAC;QACxB,iDAAC,0DAAI,IAAC,IAAI;YACR,iDAAC,gEAAU,IAAC,OAAO,EAAC,IAAI,EAAC,KAAK,EAAC,QAAQ,EAAC,KAAK,EAAC,gBAAgB,EAAC,SAAS,+BAE3D,CACR;QACP,iDAAC,0DAAI,IAAC,IAAI;YACR,iDAAC,gEAAU,IAAC,OAAO,EAAC,IAAI,EAAC,KAAK,EAAC,QAAQ,EAAC,KAAK,EAAC,gBAAgB,EAAC,SAAS,UACrE,QAAQ,CAAC,IAAI,CACH,CACR,CACF,CACR,CAAC;CACH,CAAC;;;GAvBI,YAAY;AAyBlB,iEAAe,YAAY,EAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACdrB,IAAM,gBAAgB,GAAG;IAC9B,IAAM,QAAQ,GAAa;QACzB,IAAI,EAAE,EAAE;QACR,YAAY,EAAE,EAAE;QAChB,WAAW,EAAE,EAAE;QACf,MAAM,EAAE,EAAE;QACV,OAAO,EAAE,CAAC;QACV,QAAQ,EAAE,EAAE;QACZ,YAAY,EAAE,CAAC;QACf,MAAM,EAAE,EAAE;KACX,CAAC;IACF,OAAO,QAAQ,CAAC;AAClB,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjCgC;AACqC;AAEvE,IAAM,YAAY,GAAO;IACvB,OAAO,iDAAC,mFAAY,OAAG,CAAC;CACzB,CAAC;;;AAEF,iEAAe,YAAY,EAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACNmB;AAExC,IAAM,WAAW,GAAG,UAAO,SAAiB,qCAAG,OAAO;;;;oBAC3C,WAAM,mDAAY,CAAoB,8CAAO,mBAAc,SAAW,CAAC;;gBAAjF,OAAO,GAAG,SAAuE;gBACvF,WAAO,OAAO,CAAC,IAAI,CAAC,cAAc,EAAC;;;KACpC,CAAC","sources":["webpack://project/./src/components/custom/ManifestInfo/ManifestInfo.tsx","webpack://project/./src/entities/Manifest.ts","webpack://project/./src/scene/Manifest/ManifestPage.tsx","webpack://project/./src/utils/api/missionManifests.ts"],"sourcesContent":["import React, { useEffect, useState, FC } from \"react\";\r\n\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Typography from \"@mui/material/Typography\";\r\n\r\nimport { getManifest } from \"api/missionManifests\";\r\nimport Manifest, { getEmptyManifest } from \"entities/Manifest\";\r\nimport RoverSelector from \"components/custom/RoverSelector/roverSelector\";\r\nimport RoversName from \"src/entities/RoversName\";\r\n\r\nconst ManifestInfo: FC<{ roverName: string }> = ({roverName}) => {\r\n  const [manifest, setManifest] = useState<Manifest>(getEmptyManifest());\r\n\r\n  useEffect(() => {\r\n    getManifest(roverName).then((apiResp) => {\r\n      setManifest(apiResp);\r\n    });\r\n  }, [roverName]);\r\n\r\n  return (\r\n    <Grid container spacing={4}>\r\n      <Grid item>\r\n        <Typography variant='h5' align='center' color='text.secondary' paragraph>\r\n          Name of the Rover:\r\n        </Typography>\r\n      </Grid>\r\n      <Grid item>\r\n        <Typography variant='h5' align='center' color='text.secondary' paragraph>\r\n          {manifest.name}\r\n        </Typography>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default ManifestInfo;\r\n\r\n// <div className='center'>\r\n//   <RoverSelector onSelect={setRoverInComponent} options={RoversName} />\r\n//   <div className='manifest'>\r\n//     <label>Name of the Rover:</label>\r\n//     <input type='text' value={manifest.name} disabled />\r\n\r\n//     <label>The Rover&apos;s launch date from Earth:</label>\r\n//     <input type='text' value={manifest.launch_date} disabled />\r\n\r\n//     <label>The Rover&apos;s landing date on Mars:</label>\r\n//     <input type='text' value={manifest.landing_date} disabled />\r\n\r\n//     <label>The Rover&apos;s mission status:</label>\r\n//     <input type='text' value={manifest.status} disabled />\r\n\r\n//     <label>The most recent Martian sol from which photos exist:</label>\r\n//     <input type='text' value={manifest.max_sol} disabled />\r\n\r\n//     <label>The most recent Earth date from which photos exist:</label>\r\n//     <input type='text' value={manifest.max_date} disabled />\r\n\r\n//     <label>Number of photos taken by that Rover:</label>\r\n//     <input type='text' value={manifest.photos.length} disabled />\r\n//   </div>\r\n// </div>\r\n","interface Manifest {\r\n  name: string;\r\n  landing_date: string;\r\n  launch_date: string;\r\n  status: string;\r\n  max_sol: number;\r\n  max_date: string;\r\n  total_photos: number;\r\n  photos: {\r\n    [index: number]: {\r\n      sol: number;\r\n      earth_date: string;\r\n      total_photos: number;\r\n      cameras: {\r\n        [index: number]: string;\r\n      };\r\n    };\r\n    length: number;\r\n  };\r\n}\r\n\r\nexport const getEmptyManifest = (): Manifest => {\r\n  const manifest: Manifest = {\r\n    name: \"\",\r\n    landing_date: \"\",\r\n    launch_date: \"\",\r\n    status: \"\",\r\n    max_sol: 0,\r\n    max_date: \"\",\r\n    total_photos: 0,\r\n    photos: []\r\n  };\r\n  return manifest;\r\n};\r\n\r\nexport default Manifest;\r\n","import React, { FC } from \"react\";\r\nimport ManifestInfo from \"components/custom/ManifestInfo/ManifestInfo\";\r\n\r\nconst ManifestPage: FC = () => {\r\n  return <ManifestInfo />;\r\n};\r\n\r\nexport default ManifestPage;\r\n","import Manifest from \"entities/Manifest\";\r\nimport { instance, API_URL } from \"./instance\";\r\n\r\nexport const getManifest = async (roverName: string): Promise<Manifest> => {\r\n  const ApiResp = await instance.get<MissionApiData>(`${API_URL}/manifests/${roverName}`);\r\n  return ApiResp.data.photo_manifest;\r\n};\r\n\r\nexport interface MissionApiData {\r\n  photo_manifest: Manifest;\r\n}\r\n"],"names":[],"sourceRoot":""}