{"version":3,"file":"src_scene_Manifest_ManifestPage_tsx.04dafdf9d5f449b2bcee.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAuD;AAEjB;AACY;AAEC;AACY;AAI/D,IAAM,QAAQ,GAAwC,UAAC,EAAe;QAAb,IAAI,YAAE,KAAK;IAClE,OAAO,CACL;QACE,iDAAC,0DAAI,IAAC,IAAI,QAAC,EAAE,EAAE,CAAC;YACd,iDAAC,gEAAU,IAAC,OAAO,EAAC,IAAI,EAAC,KAAK,EAAC,MAAM,EAAC,KAAK,EAAC,gBAAgB,EAAC,SAAS,UACnE,IAAI,CACM,CACR;QACP,iDAAC,0DAAI,IAAC,IAAI,QAAC,EAAE,EAAE,CAAC;YACd,iDAAC,gEAAU,IAAC,OAAO,EAAC,IAAI,EAAC,KAAK,EAAC,MAAM,EAAC,KAAK,EAAC,gBAAgB,EAAC,SAAS,UACnE,KAAK,CACK,CACR,CACN,CACJ,CAAC;CACH,CAAC;;;AAEF,IAAM,YAAY,GAA8B,UAAC,EAAa;QAAX,SAAS;;IACpD,SAA0B,+CAAQ,CAAW,mEAAgB,EAAE,CAAC,EAA/D,QAAQ,UAAE,WAAW,QAA0C,CAAC;IAEvE,gDAAS,CAAC;QACR,iEAAW,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,UAAC,OAAO;YAClC,WAAW,CAAC,OAAO,CAAC,CAAC;SACtB,CAAC,CAAC;KACJ,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC;IAEhB,OAAO,CACL,iDAAC,0DAAI,IAAC,SAAS,QAAC,aAAa,EAAE,CAAC,EAAE,UAAU,EAAE,CAAC;QAC7C,iDAAC,QAAQ,IAAC,IAAI,EAAC,qCAAqC,EAAC,KAAK,EAAE,QAAQ,CAAC,WAAW,GAAI;QACpF,iDAAC,QAAQ,IAAC,IAAI,EAAC,mCAAmC,EAAC,KAAK,EAAE,QAAQ,CAAC,YAAY,GAAI;QACnF,iDAAC,QAAQ,IAAC,IAAI,EAAC,6BAA6B,EAAC,KAAK,EAAE,QAAQ,CAAC,MAAM,GAAI;QACvE,iDAAC,QAAQ,IACP,IAAI,EAAC,sDAAsD,EAC3D,KAAK,EAAE,QAAQ,CAAC,OAAO,CAAC,QAAQ,EAAE,GAClC;QACF,iDAAC,QAAQ,IACP,IAAI,EAAC,qDAAqD,EAC1D,KAAK,EAAE,QAAQ,CAAC,QAAQ,GACxB;QACF,iDAAC,QAAQ,IACP,IAAI,EAAC,uCAAuC,EAC5C,KAAK,EAAE,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,QAAQ,EAAE,GACxC,CACG,CACR,CAAC;CACH,CAAC;;;GA5BI,YAAY;AA8BlB,iEAAe,YAAY,EAAC","sources":["webpack://project/./src/components/custom/ManifestInfo/ManifestInfo.tsx"],"sourcesContent":["import React, { useEffect, useState, FC } from \"react\";\r\n\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Typography from \"@mui/material/Typography\";\r\n\r\nimport { getManifest } from \"api/missionManifests\";\r\nimport Manifest, { getEmptyManifest } from \"entities/Manifest\";\r\nimport RoverSelector from \"components/custom/RoverSelector/roverSelector\";\r\nimport RoversName from \"src/entities/RoversName\";\r\n\r\nconst GridItem: FC<{ text: string; value: string }> = ({ text, value }) => {\r\n  return (\r\n    <>\r\n      <Grid item xs={8}>\r\n        <Typography variant='h5' align='left' color='text.secondary' paragraph>\r\n          {text}\r\n        </Typography>\r\n      </Grid>\r\n      <Grid item xs={4}>\r\n        <Typography variant='h5' align='left' color='text.secondary' paragraph>\r\n          {value}\r\n        </Typography>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nconst ManifestInfo: FC<{ roverName: string }> = ({ roverName }) => {\r\n  const [manifest, setManifest] = useState<Manifest>(getEmptyManifest());\r\n\r\n  useEffect(() => {\r\n    getManifest(roverName).then((apiResp) => {\r\n      setManifest(apiResp);\r\n    });\r\n  }, [roverName]);\r\n\r\n  return (\r\n    <Grid container columnSpacing={1} rowSpacing={1}>\r\n      <GridItem text=\"The Rover's launch date from Earth:\" value={manifest.launch_date} />\r\n      <GridItem text=\"The Rover's landing date on Mars:\" value={manifest.landing_date} />\r\n      <GridItem text=\"The Rover's mission status:\" value={manifest.status} />\r\n      <GridItem\r\n        text='The most recent Martian sol from which photos exist:'\r\n        value={manifest.max_sol.toString()}\r\n      />\r\n      <GridItem\r\n        text='The most recent Earth date from which photos exist:'\r\n        value={manifest.max_date}\r\n      />\r\n      <GridItem\r\n        text='Number of photos taken by that Rover:'\r\n        value={manifest.photos.length.toString()}\r\n      />\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default ManifestInfo;\r\n"],"names":[],"sourceRoot":""}